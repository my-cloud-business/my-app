name: Deploy Environment
 
on:
  deployment:

env:
      # Directory that contains Terraform HCL to run
      TERRAFORM_WORKING_DIRECTORY: ./terraform/src

jobs:
  deploy_details:
    name: Define Deployment Details

    runs-on: ubuntu-latest

    outputs:
      container_registry: ${{ steps.deployment_data.outputs.container_registry }}
      namespace: ${{ steps.deployment_data.outputs.namespace }}

      app_container_image: ${{ steps.deployment_data.outputs.app_container_image }}
      app_container_version: ${{ steps.deployment_data.outputs.app_container_version }}
            
      environment_name: ${{ steps.deployment_data.outputs.environment_name }}

      deployment_sha: ${{ steps.deployment_data.outputs.deployment_sha }}
      deployment_github_ref: ${{ steps.deployment_data.outputs.deployment_github_ref }}

      deploy_using_terraform: ${{ steps.deploy_tf_approach.outputs.terraform_folder_exists }}

    steps:    
      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: Check for Terraform folder
        id: deploy_tf_approach
        uses: actions/github-script@v4.1
        with: 
          script: |
            const fs = require('fs');            
            core.setOutput('terraform_folder_exists', fs.existsSync(process.env.TERRAFORM_WORKING_DIRECTORY))

      - uses: jnwng/github-app-installation-token-action@v2
        id: installation_token
        with: 
          appId: ${{ secrets.APPLICATION_ID }}
          installationId: ${{ secrets.APPLICATION_INSTALLATION_ID }}
          privateKey: ${{ secrets.APPLICATION_PRIVATE_KEY }}

      - name: Extract Deployment Details and Report Deployment in Progress
        id: deployment_data
        uses: actions/github-script@v4.1
        with:
          github-token: ${{ steps.installation_token.outputs.token }}
          script: |
            const scriptPath = require('path').resolve('./.github/workflows/scripts/unpack_deployment_payload.js')
              , deploymentPayload = require(scriptPath);
            ;
            const deploymentUtils = deploymentPayload(context, core, github)
            deploymentUtils.extractDeploymentDetails();

  
  deploy_using_terraform:
    name: Deploy using Terraform
    runs-on: ubuntu-latest
    if: ${{ needs.deploy_details.outputs.deploy_using_terraform}}
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}

    needs:
      - deploy_details      

    environment: 
      name: ${{ needs.deploy_details.outputs.environment_name }}

    timeout-minutes: 30

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
      
      - name: start deployment
        uses: bobheadxi/deployments@v1.3.0
        id: deployment
        with:
          step: start 
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{  needs.deploy_details.outputs.environment_name }}
          ref: ${{ needs.deploy_details.outputs.deployment_sha }}

      - uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - uses: hashicorp/setup-terraform@v1

      - name: update deployment status
        uses: bobheadxi/deployments@v1.3.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      # - name: Terraform Init
      #   id: init
      #   run: terraform init

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color

      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan -no-color
      
      # - uses: actions/github-script@v4.1
      #   if: github.event_name == 'pull_request'
      #   env: 
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

      #     script: |
      #       const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
      #       <details><summary>Show Plan</summary>
            
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
            
      #       </details>
            
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

